version: '3'

services:
  traefik:
    image: traefik:v2.7
    container_name: traefik
    restart: unless-stopped
    command:
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      ## RHDWP: Adminer ##
      # - --entrypoints.adminer.address=:8080
      ## RHDWP: Adminer end ##
      - --providers.file.directory=/configs
      - --providers.file.watch=true
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.watch=true
      ## RHDWP: API ##
      # - --api.dashboard=true
      ## RHDWP: API end ##
      - --certificatesresolvers.cloudflare.acme.email=${CF_API_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/acme.json
      - --certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=0
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers[0]=1.1.1.1:53
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers[1]=1.0.0.1:53
      - --certificatesresolvers.http.acme.email=${CF_API_EMAIL}
      - --certificatesresolvers.http.acme.storage=/acme.json
      - --certificatesresolvers.http.acme.httpchallenge.entrypoint=http
      - --certificatesresolvers.cloudflare.acme.keyType
      ## RHDWP: Cert staging ##
      # - --certificatesresolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesresolvers.http.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      ## RHDWP: Cert staging end ##
      ## RHDWP: Logging ##
      - --log.level=${LOGLEVEL}
      - --log.filePath=/log/traefik.log
      ## RHDWP: Logging end ##
      # Enable Hub communication (open the port 9900 and 9901 by default)
      - --experimental.hub=true
      - --hub.tls.insecure=false
      - --metrics.prometheus.addrouterslabels=true
    security_opt:
      - no-new-privileges:true
    networks:
      - web
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs:/configs
      - ./certs:/certs
      - ./acme.json:/acme.json
      - ./log:/log
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
      - FQDN=${FQDN}
    labels:
      - 'traefik.http.middlewares.service-retry.retry.attempts=4'
      - 'traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)'
      - 'traefik.http.routers.http-catchall.entrypoints=http'
      - 'traefik.http.routers.http-catchall.middlewares=redirect-to-https'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
      ## RHDWP: Buffering ##
      # - 'traefik.https.middlewares.limit.buffering.maxRequestBodyBytes=4000000000'
      # - 'traefik.https.middlewares.limit.buffering.memRequestBodyBytes=4000000000'
      # - 'traefik.https.middlewares.limit.buffering.maxResponseBodyBytes=4000000000'
      # - 'traefik.https.middlewares.limit.buffering.retryExpression=IsNetworkError() && Attempts() < 2'
      ## RHDWP: Buffering end ##
      ## RHDWP: API ##
      # - 'traefik.enable=true'
      # - 'traefik.http.routers.api.entrypoints=http'
      # - 'traefik.http.routers.api.rule=Host(`${FQDN}`)'
      # - 'traefik.http.middlewares.api-https-redirect.redirectscheme.scheme=https'
      # - 'traefik.http.routers.api-https.entrypoints=https'
      # - 'traefik.http.routers.api-https.tls=true'
      # - 'traefik.http.routers.api-https.tls.certresolver=cloudflare'
      # - 'traefik.http.routers.api-https.tls.domains[0].main=${FQDN}'
      # - 'traefik.http.routers.api-https.middlewares=api-auth'
      # - 'traefik.http.routers.api-https.rule=Host(`${FQDN}`)'
      # - 'traefik.http.middlewares.api-auth.basicauth.users=admin:$$2y$$05$$7t25C0myBoWErPjCUsEDPe/TKLjdiywW4HchSJiKNmK5nZk2saVLW'
      # - 'traefik.http.routers.api.middlewares=api-https-redirect'
      # - 'traefik.http.routers.api-https.service=api@internal'
      ## RHDWP: API end ##

  hub-agent:
    image: ghcr.io/traefik/hub-agent-traefik:v0.7.2
    container_name: hub-agent
    restart: 'on-failure'
    command:
      - run
      - --hub.token=${TRAEFIK_HUB_TOKEN}
      - --auth-server.advertise-url=http://hub-agent
      - --traefik.host=traefik
      - --traefik.tls.insecure=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - traefik

  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.8.1
    entrypoint: sh -c '
      apk add jq;
      while ! [[ -e /acme.json ]] || [[ -z "$$(jq ".[] | .Certificates | length" /acme.json)" ]];
      do sleep 1;
      done && traefik-certs-dumper file --version v2 --watch --source /acme.json --dest /certs'
    volumes:
      - ./certs:/certs
      - ./acme.json:/acme.json

  ## RHDWP: Tinyhost ##
  # tinyhost:
  #   image: nginx:alpine
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=web"
  #     - "traefik.http.routers.host.entrypoints=http"
  #     - "traefik.http.routers.host-secure.entrypoints=https"
  #     - "traefik.http.routers.host.rule=Host(`${FQDN}`)"
  #     - "traefik.http.routers.host-secure.rule=Host(`${FQDN}`)"
  #     - "traefik.http.services.host.loadbalancer.server.port=80"
  #     - "traefik.http.routers.host-secure.tls=true"
  #     - "traefik.http.routers.host-secure.tls.certresolver=http"
  #     - "traefik.http.routers.host-secure.tls.domains[0].main=${FQDN}"
  #     - "traefik.http.routers.host-secure.service=host"
  #     - "traefik.http.middlewares.host-https-redirect.redirectscheme.scheme=https"
  #     - "traefik.http.routers.host.middlewares=host-https-redirect"
  #   environment:
  #     - NGINX_HOST=${FQDN}
  #     - HOSTNAME=${HOSTNAME}
  #   volumes:
  #     - ./host:/etc/nginx/templates
  #   networks:
  #     - web
  ## RHDWP: Tinyhost end ##

  ## RHDWP: Adminer ##
  # adminer:
  #   image: adminer
  #   environment:
  #     - ADMINER_DEFAULT_SERVER=mysql
  #     - ADMINER_DESIGN=nicu
  #   networks:
  #     - %%project_label%%_internal
  #   ports:
  #     - 8080:8080
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.http.routers.adminer.entrypoints=adminer'
  #     - 'traefik.http.routers.adminer.rule=Host(`${FQDN}`)'
  ## RHDWP: Adminer end ##

  ## RHDWP: Portainer ##
  # portainer:
  #   image: portainer/portainer-ce:latest
  #   command: -H unix:///var/run/docker.sock
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./portainer:/data
  #   networks:
  #    - web
  #   labels:
  #     ## Frontend
  #     - 'traefik.enable=true'
  #     - 'traefik.http.routers.frontend.rule=Host(`portainer.${FQDN}`)'
  #     - 'traefik.http.routers.frontend.entrypoints=https'
  #     - 'traefik.http.services.frontend.loadbalancer.server.port=9000'
  #     - 'traefik.http.routers.frontend.service=frontend'
  #     - 'traefik.http.routers.frontend.tls.certresolver=http'

  #     ## Edge
  #     - 'traefik.http.routers.edge.rule=Host(`edge.${FQDN}`)'
  #     - 'traefik.http.routers.edge.entrypoints=https'
  #     - 'traefik.http.services.edge.loadbalancer.server.port=8000'
  #     - 'traefik.http.routers.edge.service=edge'
  #     - 'traefik.http.routers.edge.tls.certresolver=http'
  ## RHDWP: Portainer end ##

networks:
  web:
    external: true
  ## RHDWP: Adminer ##
  # %%project_label%%_internal:
  #   external: true
  ## RHDWP: Adminer end ##
